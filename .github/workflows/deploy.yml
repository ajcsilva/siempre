# Uncomment this deploy job in this file to use the
# https://github.com/roots/setup-trellis-cli GitHub Action
# for deploying this repo to production when pushing to main.
#
# Make sure you've set up the following secrets in your repo:
# - TRELLIS_DEPLOY_SSH_PRIVATE_KEY
# - TRELLIS_DEPLOY_SSH_KNOWN_HOSTS
# - ANSIBLE_VAULT_PASSWORD

name: Deploy site

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  create-deployment-artifacts:
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Compile Assets
        run: |
          yarn install
          yarn build

      - name: Configure PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer

      - name: Install site Composer dependencies
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: Install theme Composer dependencies
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        working-directory: ${{ env.THEME_PATH }}
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: Create WP Cli config
        run: |
          touch wp-cli.yml
          echo "
          path: public/wp
          server:
            docroot: public" > wp-cli.yml

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          touch "${GITHUB_SHA}".tar.gz
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.tar.gz --exclude=*.git --exclude=node_modules .

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./.github/workflows/servers.json)"
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Check matrix
        run: |
          echo ${{ fromJson(steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX) }}
          echo ${{ github.ref_name }}
          echo ${{ fromJson(steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}

  prepare-release-on-servers:
    name: '${{ matrix.server.name }}: Prepare release'
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/public/content/uploads

            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{ matrix.server.path }}/shared/uploads
            chmod -R 0777 ${{ matrix.server.path }}/shared
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: '${{ matrix.server.name }}: Before hook'
    runs-on: ubuntu-latest
    needs: [create-deployment-artifacts, prepare-release-on-servers]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.beforeHooks }}

  activate-release:
    name: '${{ matrix.server.name }}: Activate release'
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          SHARED_PATH: ${{ matrix.server.path }}/shared
          BASE_PATH: ${{ matrix.server.path }}
          WP_ENV: ${{ secrets[matrix.server.env] }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,SHARED_PATH,BASE_PATH,ENV_PATH,WP_ENV
          script: |
            printf "%s" "$WP_ENV" > "${BASE_PATH}/.env"
            ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -f $SHARED_PATH/uploads $RELEASE_PATH/public/content
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH

  run-after-hooks:
    name: '${{ matrix.server.name }}: After hook'
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        activate-release,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.afterHooks }}

  clean-up:
    name: '${{ matrix.server.name }}: Clean up'
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        activate-release,
        run-after-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX)[github.ref_name] }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
